extends  ../../../_part/_baseShell

block head
	title Agenda
	include ../../../_part/_header

block main
	style.
		.section {
			background-size: cover;
			background-attachment: fixed;
			background-image: url(res/beach768.jpg);
		}

		.section1 {
			background-image: url(res/beach768.jpg);
		}
		.section2 {
			background-image: url(res/city768.jpg);
		}
		.section3{
			background-image: url(res/light768.jpg);
		}
		.section4{
			background-image: url(res/road768.jpg);
		}

	#fullpage
		.section1.section
			.mui-container-fluid
				.mui-panel
					H3 Firebase Service
					p The cloud has now become more cloudy. BaaS is no DB, just services.

		.section2.section
			.mui-container-fluid
				.mui-panel
					H4 Services should be per page.
					p and match the fields needed on the page. If there is 'joins' or complex queries, it can be handled server side. So that page does not have a 'mapping' impedance (like existed for ORM layes). Page should not know  how data is gotten, so for example we can change from FireBase to Google Data Services - and it would not affect the page. But if the page fileds change, the Service/API would change. Since services map to the page, how the data is used.


		.section3.section
			.mui-container-fluid
				.mui-panel
					H3 Ex. service. First version can return hard coded JSON - as needed by the page.
					code
						pre.
							router.all('/list', function (req, res) {	
								const dat = req.body
								const pro = links.listAll()
								pro.then(function(rows){
									res.status(200).send(JSON.stringify(rows))
								})//c
							})


		.section4.section
			.mui-container-fluid
				.mui-panel
					p Once you know that the service/API works on a page, then you can start implementing. A base class that we can extend, note that you need the free service key from FireBase.
					p NOTE: Services should run in a different NODE instance from your front end. Ex: Scaling and security issues. 
					code
						pre.
							const fb = firebase.initializeApp({
								credential: firebase.credential.cert(serviceAccount),
								databaseURL: "https://YOUR-DB.firebaseio.com"
							})
							class BaseFB {
								constructor(db_) {
									this.fdb = fb.database()
								}
								static toArray(ra){
									var array=[]
									for(var key in ra){
										array.push(ra[key])
									}
									return array
								}//()
							}
							module.exports = BaseFB 

		.section4.section
			.mui-container-fluid
				.mui-panel
					p Implement.
					code
						pre.
							const BaseFB = require('./BaseFB')
							class Links extends BaseFB {
								constructor() {
									super()
									this.table = 'links10'
									this.ref = this.fdb.ref(this.table)
								}
								add(row) { // return a promise
									const pk = this.fdb.ref().child(this.table).push().key
									row['pk'] = pk
									const ut = Date.now()
									row['ts'] = ut
									return this.fdb.ref(this.table+'/'+ pk).setWithPriority(row, 0-
									ut).then(function(a,b){return pk})
								}//()
								listAll() {//returns all rows sorted backwards by date
									return this.ref.once('value').then(function(res){
											const row=res.val()
											const rows= BaseFB.toArray(row)
											return rows
									})
								}//()

	script.
		TS.onAppReady(UIinit)
		function UIinit() {
			console.log('x')
			$('#fullpage').fullpage({
				//verticalCentered: false,
				css3:false
			})//config
		}

block footer
	include ../../../_part/_footer
